#!/bin/bash

#set -e

init_config() {
    cat > ${CONFFILE} <<-EOF
	;
	;  virtuoso.ini
	;
	;  Configuration file for the OpenLink Virtuoso VDBMS Server
	;
	;  To learn more about this product, or any other product in our
	;  portfolio, please check out our web site at:
	;
	;      http://virtuoso.openlinksw.com/
	;
	;  or contact us at:
	;
	;      general.information@openlinksw.com
	;
	;  If you have any technical questions, please contact our support
	;  staff at:
	;
	;      technical.support@openlinksw.com
	;
	
	;
	;  Database setup
	;
	[Database]
	DatabaseFile			= virtuoso.db
	ErrorLogFile			= virtuoso.log
	LockFile			= virtuoso.lck
	TransactionFile			= virtuoso.trx
	xa_persistent_file		= virtuoso.pxa
	ErrorLogLevel			= 7
	FileExtend			= 200
	MaxCheckpointRemap		= 2000
	Striping			= 0
	TempStorage			= TempDatabase
	
	
	[TempDatabase]
	DatabaseFile			= virtuoso-temp.db
	TransactionFile			= virtuoso-temp.trx
	MaxCheckpointRemap		= 2000
	Striping			= 0
	
	
	;
	;  Server parameters
	;
	[Parameters]
	ServerPort			= 1111
	LiteMode			= 0
	DisableUnixSocket		= 1
	DisableTcpSocket		= 0
	;SSLServerPort			= 2111
	;SSLCertificate			= cert.pem
	;SSLPrivateKey			= pk.pem
	;X509ClientVerify		= 0
	;X509ClientVerifyDepth		= 0
	;X509ClientVerifyCAFile		= ca.pem
	MaxClientConnections		= 10
	CheckpointInterval		= 60
	O_DIRECT			= 0
	CaseMode			= 2
	MaxStaticCursorRows		= 5000
	CheckpointAuditTrail		= 0
	AllowOSCalls			= 0
	SchedulerInterval		= 10
	DirsAllowed			= ., /usr/local/vos7/vad
	ThreadCleanupInterval		= 0
	ThreadThreshold			= 10
	ResourcesCleanupInterval	= 0
	FreeTextBatchSize		= 100000
	SingleCPU			= 0
	VADInstallDir			= /usr/local/vos7/vad/
	PrefixResultNames               = 0
	RdfFreeTextRulesSize		= 100
	IndexTreeMaps			= 256
	MaxMemPoolSize                  = 200000000
	PrefixResultNames               = 0
	MacSpotlight                    = 0
	IndexTreeMaps                   = 64
	MaxQueryMem 		 	= 2G		; memory allocated to query processor
	VectorSize 		 	= 1000		; initial parallel query vector (array of query operations) size
	MaxVectorSize 		 	= 1000000	; query vector size threshold.
	AdjustVectorSize 	 	= 0
	ThreadsPerQuery 	 	= 4
	AsyncQueueMaxThreads 	 	= 10
	;;
	;; When running with large data sets, one should configure the Virtuoso
	;; process to use between 2/3 to 3/5 of free system memory and to stripe
	;; storage on all available disks.
	;;
	;; Uncomment next two lines if there is 2 GB system memory free
	;NumberOfBuffers          = 170000
	;MaxDirtyBuffers          = 130000
	;; Uncomment next two lines if there is 4 GB system memory free
	;NumberOfBuffers          = 340000
	; MaxDirtyBuffers          = 250000
	;; Uncomment next two lines if there is 8 GB system memory free
	;NumberOfBuffers          = 680000
	;MaxDirtyBuffers          = 500000
	;; Uncomment next two lines if there is 16 GB system memory free
	;NumberOfBuffers          = 1360000
	;MaxDirtyBuffers          = 1000000
	;; Uncomment next two lines if there is 32 GB system memory free
	;NumberOfBuffers          = 2720000
	;MaxDirtyBuffers          = 2000000
	;; Uncomment next two lines if there is 48 GB system memory free
	;NumberOfBuffers          = 4000000
	;MaxDirtyBuffers          = 3000000
	;; Uncomment next two lines if there is 64 GB system memory free
	;NumberOfBuffers          = 5450000
	;MaxDirtyBuffers          = 4000000
	;;
	;; Note the default settings will take very little memory
	;; but will not result in very good performance
	;;
	NumberOfBuffers          = 10000
	MaxDirtyBuffers          = 6000
	
	
	[HTTPServer]
	ServerPort			= 8890
	ServerRoot			= /usr/local/vos7/vsp
	MaxClientConnections		= 10
	DavRoot				= DAV
	EnabledDavVSP			= 0
	HTTPProxyEnabled		= 0
	TempASPXDir			= 0
	DefaultMailServer		= localhost:25
	ServerThreads			= 10
	MaxKeepAlives			= 10
	KeepAliveTimeout		= 10
	MaxCachedProxyConnections	= 10
	ProxyConnectionCacheTimeout	= 15
	HTTPThreadSize			= 280000
	HttpPrintWarningsInOutput	= 0
	Charset				= UTF-8
	;HTTPLogFile		        = logs/http.log
	MaintenancePage             	= atomic.html
	EnabledGzipContent          	= 1
	
	
	[AutoRepair]
	BadParentLinks			= 0
	
	[Client]
	SQL_PREFETCH_ROWS		= 100
	SQL_PREFETCH_BYTES		= 16000
	SQL_QUERY_TIMEOUT		= 0
	SQL_TXN_TIMEOUT			= 0
	;SQL_NO_CHAR_C_ESCAPE		= 1
	;SQL_UTF8_EXECS			= 0
	;SQL_NO_SYSTEM_TABLES		= 0
	;SQL_BINARY_TIMESTAMP		= 1
	;SQL_ENCRYPTION_ON_PASSWORD	= -1
	
	[VDB]
	ArrayOptimization		= 0
	NumArrayParameters		= 10
	VDBDisconnectTimeout		= 1000
	KeepConnectionOnFixedThread	= 0
	

	[URIQA]
	DynamicLocal			= 0
	DefaultHost			= localhost:8890
	
	
	[SPARQL]
	;ExternalQuerySource		= 1
	;ExternalXsltSource 		= 1
	;DefaultGraph      		= http://localhost:8890/dataspace
	;ImmutableGraphs    		= http://localhost:8890/dataspace
	ResultSetMaxRows           	= 10000
	MaxQueryCostEstimationTime 	= 400	; in seconds
	MaxQueryExecutionTime      	= 60	; in seconds
	DefaultQuery               	= select distinct ?Concept where {[] a ?Concept} LIMIT 100
	DeferInferenceRulesInit    	= 0  ; controls inference rules loading
	;PingService       		= http://rpc.pingthesemanticweb.com/
	
	
	[Plugins]
	LoadPath			= /usr/local/vos7/hosting
	Load1				= plain, wikiv
	Load2				= plain, mediawiki
	Load3				= plain, creolewiki
	Load4				= plain, im
	;Load7				= attach, libphp5.so
	;Load8				= Hosting, hosting_php.so
EOF
}


init_database() {
  DBA_PW=$(openssl rand 6 -base64)

  mkdir -p "${VIRT_DBDIR}"

  cd ${VIRT_DBDIR}
  [ -f virtuoso.ini ] || init_config

  if [ \! -f virtuoso.db ]
  then
      echo "Initializing new database in ${VIRT_DBDIR}..."
      virtuoso-t +checkpoint-only +pwdold dba +pwddba "${DBA_PW}" +pwddav "${DBA_PW}" -f -c "${CONFFILE}"
      echo "NOTE: Initial password for dba and dav: ${DBA_PW}"
  fi
}


isql_database() {
  if  [ \! -d "${VIRT_DBDIR}" ]
  then
    echo "Error: Database [$DB] does not exist"
    exit 1
  fi

  cd "${VIRT_DBDIR}"

  if [ \! -f virtuoso.lck ]
  then
    echo "ERROR: Database [$DB] was not started"
    exit 1
  fi

  PORT=$(inifile +inifile "${CONFFILE}" +section Parameters +key ServerPort)

  echo "Trying to contact virtuoso on port $PORT"
  isql $PORT $*
}


start_database(){
  if  [ \! -d "${VIRT_DBDIR}" ]
  then
    echo "Error: Database [$DB] does not exist"
    exit 1
  fi

  cd "${VIRT_DBDIR}"
  if [ -f virtuoso.lck ]
  then
    echo "ERROR: Database [$DB] already started"
    exit 1
  fi

  virtuoso-t -c "${CONFFILE}" $*
}

stop_database(){
  if  [ \! -d "${VIRT_DBDIR}" ]
  then
    echo "Error: Database [$DB] does not exist"
    exit 1
  fi

  cd "${VIRT_DBDIR}"
  if [ \! -f virtuoso.lck ]
  then
    echo "ERROR: Database [$DB] was not started"
    exit 1
  fi

  PORT=$(inifile +inifile "${CONFFILE}" +section Parameters +key ServerPort)

  echo "Trying to contact virtuoso on port $PORT"
  isql $PORT -K
}


vos_usage() {
  echo "OpenLink Virtuoso Open Source Edition (SNAP)"
  echo "Version: $PACKAGE_VERSION"
  echo "Copyright (C) 1009-2018 OpenLink Software"
  echo
  echo "Usage:"
  echo "    virtuoso-opensource CMD args"
  echo
  echo "CMD list"
  echo "  help	         -  This text"
  echo "  version        -  Show version of current snap package"
  echo "  create [DB]    -  Create database DB"
  echo "  start [DB]     -  Start database DB"
  echo "  stop [DB]      -  Stop database DB"
  echo "  config [DB]    -  Show path to virtuoso.ini for database DB"
  echo "  logfile [DB]   -  Show path to virtuoso.log for database DB"
  echo 
}



USERID=$(id -u)
if [ "${USERID}" = "0" ];then
  VOS_SNAPDIR="${SNAP_COMMON}"
else
  VOS_SNAPDIR="${SNAP_USER_COMMON}"
fi

export PACKAGE_VERSION="$SNAP_VERSION/$SNAP_ARCH/$SNAP_REVISION"

export CMD=${1:-help}
export DB=${2:-database}

export VIRT_DBDIR="${VOS_SNAPDIR}/${DB}"
export CONFFILE="${VIRT_DBDIR}/virtuoso.ini"

#
#  Execute commands
#
case "$CMD" in
    help)
		vos_usage
		;;

    version)
		echo "$PACKAGE_VERSION"
		;;

    env)
		env
		;;

    config)
		echo "$CONFFILE"
		;;

    logfile)
		echo "$VIRT_DBDIR/virtuoso.log"
		;;

    create)
		init_database
		;;

    start)
		start_database $*
		;;

    stop)
		stop_database $*
		;;

    isql)
		shift
		shift
		isql_database $*
		;;

       *)
		vos_usage
		;;
esac


exit 0

DBNAME=${1:-database}


FILESDIR="${VOS_SNAPDIR}/files"

[ -d "${VIRT_DBDIR}" ] 		|| init_database

if [ "${USERID}" = "0" ];
then
  # Ensure virtuoso user exists and that the correct permissions are set on various directories
  adduser --system --disabled-login --ingroup openlink --home /nonexistent --gecos "OpenLink Virtuoso" --shell /sbin/nologin virtuoso >/dev/null
  chown -R virtuoso:openlink "${VIRT_DBDIR}" 
  chmod 750 "${VIRT_DBDIR}"
fi

echo "Starting server..."
cd "${VIRT_DBDIR}"
virtuoso-t -c "${CONFFILE}" $@
